<?php
// $Id$

/**
 * @file
 * Test the xgit-update hook.
 *
 * Copyright 2009 by Daniel Hackney ("chrono325", http://drupal.org/user/384635)
 */

require_once(drupal_get_path('module', 'versioncontrol_git') .'/tests/git_test_helper.inc');

class GitUpdateHookTestCase extends GitTestHelper {

  public static function getInfo() {
    return array(
      'name' => t('versioncontrol_git update Hook'),
      'description' => t('Test the functionality of the Git update hook.'),
      'group' => t('Version Control - Git'),
    );
  }

  /**
   * Test the printing of usage information when incorrect number of arguments
   * is given.
   */
  public function testInvalidArgHelp() {
    $this->initRepo();
    $this->initHook('update');

    $result = shell_exec($this->hooks['update']['file'] .' 2>&1');
    $usage_text = t('Usage: php !cli <config file> <ref> <oldrev> <newrev>',
                  array('!cli' => $this->hooks['update']['dst']));

    $this->assertTrue(
      is_int(strpos($result, $usage_text)),
      t('Print help text when incorrect number of arguments is given.'),
      t('Shell Interaction')
    );
  }

  /**
   * Test pushing to the repository, both with and without a
   */
  public function testPushing() {
    $this->initRepo();
    $this->initHook('update');
    $result = $this->wcClone();
    $expected = sprintf('Initialized empty Git repository in %s', $this->repo['wc_path']);
    $this->assertTrue(
      is_int(strpos($result, $expected)),
      t('Clone the git repository.'),
      t('Shell Interaction')
    );

    $path     = $this->randomName();
    $contents = $this->randomName();
    $result   = $this->wcAddSampleFile($path, $contents);

    $this->assertTrue(
      is_int(strpos($result, "\n")),
      t('Add test file to the repository (should not produce output).'),
      t('Shell Interaction')
    );

    // Attempt to commit, but fail because the system user does not have access.
    $message = $this->randomName();
    $result = $this->wcCommit($message);

    $pattern = array(
      'Created initial commit %s: %s',
      '1 files changed, 1 insertions(+), 0 deletions(-)',
      'create mode 100644 %s',
    );
    $pattern = preg_quote(implode("\n", $pattern), '/');
    $pattern = sprintf($pattern,$this->obj_regex, $message, $path);
    $pattern = '/'. preg_quote($pattern, '/') .'/';
    $this->assertTrue(
      preg_match($pattern, $result, $matches),
      t('Commit the initial revision.'),
      t('Shell Interaction')
    );
    // Get the revision identifier (the first match group).
    $rev = $matches[1];

    $result = $this->wcPush();
    $pattern = array(
      'error: hooks/update exited with error code %s',
      'error: hook declined to update refs/heads/master',
      'To %s',
      '! [remote rejected] master -> master (hook declined)',
      "error: failed to push some refs to '%s'",
    );
    $pattern = preg_quote(implode("\n", $pattern), '/');
    $pattern = sprintf($pattern,
               '(\d+)',
               preg_quote($this->repo['path'], '/'),
               preg_quote($this->repo['path'], '/'));
    $pattern = '/'. $pattern .'/';
    $this->assertTrue(
      preg_match($pattern, $result, $matches),
      t('Fail pushing to repository without an account.'),
      t('Update hook')
    );
    $error_code = $matches[1];

    $this->assertEqual(
      $error_code,
      VERSIONCONTROL_GIT_ERROR_NO_ACCOUNT,
      t('Correct error code is returned.'),
      t('Update hook')
    );

    $user = $this->drupalCreateUser(array('administer version control systems'));
    $this->drupalLogin($user);
    $username = $this->randomName();

    // Create the Drupal repository and add a user account.
    $this->initDrupalRepo($this->randomName());
    $this->initGitAccount($user->uid, $username);

    $result = $this->wcPush();
    $pattern = array(
      'To %s',
      '* [new branch]      master -> master',
    );
    $pattern = sprintf(implode("\n", $pattern), $this->repo['path']);
    $this->assertTrue(
      is_int(strpos($result, $pattern)),
      t('Successfully push to remote repository when user has an account.'),
      t('Update hook')
    );
  }
}
